"""
    Uses the .hdf5 file generated by pyVox.py to visualize the active-site
    ligand interactions.
    User has three inputs:
        1) what set to look at (train, val, test)
        2) what index from that set would you like to see
        3) what mode (e: shows electrons only, n:shows nuclei only, b: shows both)
"""

import numpy as np
import h5py
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import os
import sys

def make_ax(grid=False):
    fig = plt.figure()
    ax = fig.gca(projection='3d')
    ax.set_xlabel("x")
    ax.set_ylabel("y")
    ax.set_zlabel("z")
    ax.grid(grid)
    return ax

def main():
    #replace path with path of directory contiaing voxelized data
    voxelizedDataPath = '/Users/brycekroencke/Documents/Fellowship/data/voxelized'

    set = str(sys.argv[1]) #Which set to pull from, (train, val, test)
    index = int(sys.argv[2]) #Which index in the set to graph data
    mode = str(sys.argv[3]) #e = electrons, n = nuclei, b = both


    validSets = ['Train', 'train', 'Test', 'test', 'validation', 'Validation', 'val', 'Val']
    trainSet = ['Train', 'train']
    testSet = ['Test', 'test']
    valSet = ['Val', 'val']
    validModes = ['b','B','e','E','n','N']
    eSet = ['E','e']
    nSet = ['N','n']
    bSet = ['B','b']

    if set not in validSets:
        raise RuntimeError('valid sets are train, test, val') from error
    if mode not in validModes:
        raise RuntimeError('valid modes are e, n, b') from error

    if mode in eSet:
        eShow = True
        nShow = False
        modePrintLabel = "Showing only electrons"
    elif mode in nSet:
        nShow = True
        eShow = False
        modePrintLabel = "Showing only nuclei"
    elif mode in bSet:
        eShow = True
        nShow = True
        modePrintLabel = "Showing both electrons and nuclei"

    os.chdir(voxelizedDataPath)
    h5f = h5py.File('voxelData.h5','r')
    trainData = h5f['train_ligands'][:]
    trainLabels = h5f['train_labels'][:]
    valData = h5f['val_ligands'][:]
    valLabels = h5f['val_labels'][:]
    testData = h5f['test_ligands'][:]
    testLabels = h5f['test_labels'][:]
    h5f.close()


    if set in trainSet:
        matrixArray = trainData
        labelsArray = trainLabels
        setName = 'training data'
    elif set in valSet:
        matrixArray = valData
        labelsArray = valLabels
        setName = 'validation data'
    elif set in testSet:
        matrixArray = testData
        labelsArray = testLabels
        setName = 'testing data'
    print("\n" * 5)
    print('---------------------------------------------------------')
    print('                     Voxel Viewer')
    print('---------------------------------------------------------')
    print("Mode               : "+modePrintLabel)
    print("Using              : "+setName)
    print("Data index         : "+str(index))
    print("Interaction energy : "+str(labelsArray[index]))
    print('---------------------------------------------------------')
    print('            Graph may take a minute to load')
    print("\n" * 3)

    ax = make_ax(True)
    if eShow:
        ax.voxels(matrixArray[index,:,:,:,0], facecolors='#1f77b430', edgecolors='#1f77b430', alpha = .4)
    if nShow:
        ax.voxels(matrixArray[index,:,:,:,1], facecolors='red', edgecolors='red')
    plt.show()

#Run the main fuction
if __name__ == "__main__":
    main()
